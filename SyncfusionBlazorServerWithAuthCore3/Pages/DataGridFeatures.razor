@page "/datagrid-features"
@using Syncfusion.Blazor.Grids
@using SyncfusionBlazorServerWithAuthCore3.Data
@inject DataGridService DataGridService
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;
@inject IJSRuntime JsRuntime

<h2>DataGrid</h2>
<br />
<div id="ControlRegion">
    <SfGrid ID="Grid" DataSource="@ListEventDetails" @ref="Grid" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowSelection="true"
            AllowSorting="true" Toolbar="@(new List<string>() { "Add", "ExcelExport","Search"})">
        @*Height="315" Width="900"*@
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"></GridEditSettings>
        @*<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>*@
        <GridPageSettings PageSizes="true"></GridPageSettings>
        @*<GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>*@
        <GridEvents OnActionComplete="@ActionCompleteHandler" CommandClicked="OnCommandClicked" OnToolbarClick="ToolbarClick" TValue="EventDetails"></GridEvents>
        <GridColumns>
            @*<GridColumn Type='ColumnType.CheckBox' Width="50"></GridColumn>*@
            <GridColumn Field=@nameof(EventDetails.EventName) HeaderText="Event Name" IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true })" TextAlign="TextAlign.Left" Width="120"></GridColumn>
            <GridColumn Field=@nameof(EventDetails.EventAddress) HeaderText="Event Address" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
            <GridColumn Field=@nameof(EventDetails.EventDescription) HeaderText="Event Description" DisableHtmlEncode="false" EditType="EditType.DefaultEdit"></GridColumn>
            <GridColumn Field=@nameof(EventDetails.LastSentDate) HeaderText="Last Sent Date" EditType="EditType.DatePickerEdit" Format="d" TextAlign="TextAlign.Right" Width="130" Type="ColumnType.Date"></GridColumn>
            <GridColumn Field=@nameof(EventDetails.CountSent) HeaderText="No. of Sent" TextAlign="TextAlign.Right" EditType="EditType.NumericEdit" Width="120"></GridColumn>
            <GridColumn HeaderText="Manage Records" Width="150">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-save", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-cancel-icon", CssClass="e-flat" })"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>
<br />
<div class="alert alert-secondary mt-4" role="alert">
    <span class="oi oi-person mr-2" aria-hidden="true"></span>
    <span>You are connected as random name: <b>@_username</b></span>
    <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
</div>
<div id="scrollbox">
    @foreach (var item in _messages)
    {
        @if (item.IsNotice)
        {
            <div class="alert alert-info">@item.Body</div>
        }
        else
        {
            <div class="@item.CSS">
                <div class="user">@item.Username</div>
                <div class="msg">@item.Body</div>
            </div>
        }
    }
    <hr />
</div>
<br />
<style>
    .ulstyle {
        margin: 0px;
        padding-left: 20px;
        display: inline-block;
    }

    .list {
        float: left;
        line-height: 20px;
        margin: 10px;
        min-width: 200px;
    }
    .alert {
        padding: .2rem 0.5rem;
    }
</style>
@code{
    SfGrid<EventDetails> Grid;

    public List<EventDetails> ListEventDetails { get; set; }


    protected override async void OnInitialized()
    {
        ListEventDetails = DataGridService.GetEvent();
        await DisconnectAsync();
        await Chat();
    }
    public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport")
        {
            this.Grid.ExcelExport();
        }
        if (args.Item.Id == "Grid_add")
        {
            var a = ListEventDetails;
        }
    }
    public void OnCommandClicked(CommandClickEventArgs<EventDetails> args)
    {
        if (args.CommandColumn.Type == CommandButtonType.Save)
        {
            var a = args.RowData;
        }
    }
    public async void ActionCompleteHandler(ActionEventArgs<EventDetails> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {

            if (args.Action == "Edit")
            {
                DataGridService.UpdateEvent(args.Data);
                RefreshGrid();
                await SendAsync("updated event " + args.Data.EventName);
            }
            if (args.Action == "Add")
            {
                DataGridService.AddEvent(args.Data);
                //Grid.Refresh();
                RefreshGrid();
                await SendAsync("added event " + args.Data.EventName);
            }
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            DataGridService.DeleteEvent(args.Data);
            RefreshGrid();
            await SendAsync("deleted event " + args.Data.EventName);
        }
    }

    public async void RefreshGrid()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, NavigationManager.BaseUri + "api/grid");
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = client.SendAsync(request).Result;

        if (response.IsSuccessStatusCode)
        {
            var responseStream = await response.Content.ReadAsStringAsync();
            // reload grid
            ListEventDetails = JsonSerializer.Deserialize
            <List<EventDetails>>(responseStream);
        }
    }

    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username = RandomName(3);
    private static Random random = new Random();
    public static string RandomName(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length)
          .Select(s => s[random.Next(s.Length)]).ToArray());
    }
    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    public async Task Chat()
    {
        await this.JsRuntime.InvokeVoidAsync("console.log", _username);

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + SyncfusionBlazorServerWithAuthCore3.Hubs.ChatHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {_username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        //update grid live
        RefreshGrid();
        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _username, message);

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}
